var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import PropTypes from 'prop-types';
import { createElement, Component } from 'react';

import { CONTEXT_NAMESPACE, ID_NAMESPACE } from '../utils/namespace';
import appendStyle from '../utils/appendStyle';

var idCache = {};

var UniversalStyle = function (_Component) {
  _inherits(UniversalStyle, _Component);

  function UniversalStyle(props, context) {
    _classCallCheck(this, UniversalStyle);

    var _this = _possibleConstructorReturn(this, (UniversalStyle.__proto__ || Object.getPrototypeOf(UniversalStyle)).call(this, props, context));

    if (!idCache[props.css]) {
      // generating a unique style id to prevent duplicate nodes
      // within client-sides document.head
      var uniqueId = Object.keys(idCache).length;
      idCache[props.css] = ID_NAMESPACE + uniqueId;
    }

    if (context[CONTEXT_NAMESPACE]) {
      // add the rendered css to the cache to only render once during SSR
      if (!context[CONTEXT_NAMESPACE][props.css]) {
        context[CONTEXT_NAMESPACE][props.css] = true;
        _this.isFirstOccurence = true;
      }
    } else {
      // if no cache is provided, render multiple times
      _this.isFirstOccurence = true;
    }
    return _this;
  }

  _createClass(UniversalStyle, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.isFirstOccurence) {
        var css = this.props.css;
        var id = idCache[css];

        // inject the style into the head if it unmounts
        // to ensure its existence for other instances
        // using the same CSS rendered
        appendStyle(id, css);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      // only actually render the style node
      // if its the first occurence
      if (this.isFirstOccurence) {
        return createElement('style', {
          dangerouslySetInnerHTML: { __html: this.props.css }
        });
      }

      return null;
    }
  }]);

  return UniversalStyle;
}(Component);

export default UniversalStyle;


UniversalStyle.contextTypes = _defineProperty({}, CONTEXT_NAMESPACE, PropTypes.object);