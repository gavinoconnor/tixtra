'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _namespace = require('../utils/namespace');

var _appendStyle = require('../utils/appendStyle');

var _appendStyle2 = _interopRequireDefault(_appendStyle);

var _isDOMReady = require('../utils/isDOMReady');

var _isDOMReady2 = _interopRequireDefault(_isDOMReady);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var idCache = {};

var ClientStyle = function (_Component) {
  _inherits(ClientStyle, _Component);

  function ClientStyle(props, context) {
    _classCallCheck(this, ClientStyle);

    var _this = _possibleConstructorReturn(this, (ClientStyle.__proto__ || Object.getPrototypeOf(ClientStyle)).call(this, props, context));

    if (!idCache[props.css]) {
      // generating a unique style id to prevent duplicate nodes
      // within client-sides document.head
      var uniqueId = Object.keys(idCache).length;
      idCache[props.css] = _namespace.ID_NAMESPACE + uniqueId;
    }

    if ((0, _isDOMReady2.default)()) {
      (0, _appendStyle2.default)(idCache[props.css], props.css);
      _this.isReady = true;
    }
    return _this;
  }

  _createClass(ClientStyle, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (!this.isReady && (0, _isDOMReady2.default)()) {
        (0, _appendStyle2.default)(idCache[this.props.css], this.props.css);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }]);

  return ClientStyle;
}(_react.Component);

exports.default = ClientStyle;